apply plugin: 'java'
apply plugin: 'maven'

group = 'me.joeycumines'

tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors()
}

// tag::repositories[]
repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}
// end::repositories[]

// tag::jar[]
jar {
    baseName = 'java-promises'
    version =  '1.0.0'
}
// end::jar[]

// tag::dependencies[]
dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testCompile 'com.github.lukas-krecan:completion-stage:completion-stage-0.0.9'
    testCompile 'com.github.joeycumines:j8stages:0.0.0'
}
// end::dependencies[]

// tag::wrapper[]
task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}
// end::wrapper[]

// give more info about unchecked and depreciation warnings
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

javadoc {
    classpath += sourceSets.test.compileClasspath
    source += sourceSets.test.allJava
}

task testJavadoc(type: Javadoc) {
    source = sourceSets.test.allJava
    classpath = sourceSets.test.compileClasspath
    // if not changed the destinationDir, the javadoc for production code is overridden.
    destinationDir = file("${buildDir}/docs/testjavadoc")
    doLast {
        delete './docs/test'
        copy {
            from './build/docs/testjavadoc'
            into './docs/test'
        }
    }
}

// run this to generate the java doc
task generateDoc(type: Javadoc) {
    source = sourceSets.main.allJava
    doLast {
        delete './docs'
        copy {
            from './build/docs/javadoc'
            into './docs'
        }
    }
}
